{"version":3,"sources":["components/Navigation/functions.js","components/Navigation/index.js","components/Navigation/Navigation.js","components/PageInfo/index.js","components/PageInfo/PageInfo.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["handleClick","e","value","target","innerHTML","document","querySelectorAll","forEach","info","style","display","getElementById","Navigation","className","map","item","index","onClick","PageInfo","id","App","React","useState","isInitialMount","setIsInitialMount","useEffect","divInstall","butInstall","installPromotion","querySelector","window","addEventListener","event","console","log","preventDefault","deferredPrompt","classList","toggle","a","promptEvent","prompt","userChoice","result","location","protocol","requireHTTPS","href","replace","remove","navigator","serviceWorker","register","scope","handleInstallBtnClick","outcome","type","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ebe25b26.chunk.js","sourcesContent":["export const handleClick = (e) => {\n    const value = e.target.innerHTML;\n    const allPageInfo = [...document.querySelectorAll('.page-info')];\n    allPageInfo.forEach(info => info.style.display = 'none');\n    const currentInfo = document.getElementById(value);\n    currentInfo.style.display = 'block';\n}","import Navigation from \"./Navigation\";\n\nexport default Navigation;","import React from 'react';\nimport './style.css'\nimport {handleClick} from \"./functions\";\n\nconst Navigation = () => {\n    const navigationList = ['Home', 'News', 'Contact', 'About'];\n    return (\n        <div className=\"navigation-wrapper\">\n            <ul className=\"navigation\">\n                {navigationList.map((item, index) =>\n                    <li key={index}><a onClick={handleClick}>{item}</a></li>\n                )}\n            </ul>\n        </div>\n    )\n};\n\nexport default Navigation;","import PageInfo from \"./PageInfo\";\n\nexport default PageInfo;","import React from \"react\";\nimport './style.css'\n\nconst PageInfo = () => {\n    return (\n        <div className=\"page-info-wrapper\">\n            <div className=\"page-info\" id=\"Home\" data-testid=\"home-info\">Something about home</div>\n            <div className=\"page-info\" id=\"News\" data-testid=\"news-info\">Something about news</div>\n            <div className=\"page-info\" id=\"Contact\" data-testid=\"contact-info\">Something about contact</div>\n            <div className=\"page-info\" id=\"About\" data-testid=\"about-info\">Something about about</div>\n        </div>\n    )\n}\n\nexport default PageInfo;","import React from 'react';\nimport './App.css';\nimport Navigation from \"./components/Navigation\";\nimport PageInfo from \"./components/PageInfo\";\n\nfunction App() {\n  const [isInitialMount, setIsInitialMount] = React.useState(true);\n\n  React.useEffect(() => {\n    if (isInitialMount) {\n      setIsInitialMount(false)\n    } else {\n      const divInstall = document.getElementById('installContainer');\n      const butInstall = document.getElementById('butInstall');\n      const installPromotion = document.querySelector('.install-promotion');\n\n      /* Put code here */\n      window.addEventListener('beforeinstallprompt', (event) => {\n        console.log('👍', 'beforeinstallprompt', event);\n\n        event.preventDefault();\n        // Stash the event so it can be triggered later.\n        window.deferredPrompt = event;\n\n        installPromotion.style.display = 'block';\n\n        // Remove the 'hidden' class from the install button container\n        divInstall.classList.toggle('hidden', false);\n      });\n\n      butInstall.addEventListener('click', async () => {\n        console.log('👍', 'butInstall-clicked');\n\n        installPromotion.style.display = 'none';\n\n        const promptEvent = window.deferredPrompt;\n        if (!promptEvent) {\n          // The deferred prompt isn't available.\n          return;\n        }\n        // Show the install prompt.\n        promptEvent.prompt();\n        // Log the result\n        const result = await promptEvent.userChoice;\n        console.log('👍', 'userChoice', result);\n        // Reset the deferred prompt variable, since\n        // prompt() can only be called once.\n        window.deferredPrompt = null;\n        // Hide the install button.\n        divInstall.classList.toggle('hidden', true);\n      });\n\n      window.addEventListener('appinstalled', (event) => {\n        console.log('👍', 'appinstalled', event);\n        installPromotion.style.display = 'none';\n        // Clear the deferredPrompt so it can be garbage collected\n        window.deferredPrompt = null;\n      });\n\n      if (window.location.protocol === 'http:') {\n        const requireHTTPS = document.getElementById('requireHTTPS');\n        const link = requireHTTPS.querySelector('a');\n        link.href = window.location.href.replace('http://', 'https://');\n        requireHTTPS.classList.remove('hidden');\n      }\n    }\n  })\n\n\n\n    /* Only register a service worker if it's supported */\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('https://assetbekov-almar.github.io/dissertation-pwa/service-worker.js', {scope: 'https://assetbekov-almar.github.io/dissertation-pwa/service-worker.js'});\n    }\n\n    /**\n     * Warn the page must be served over HTTPS\n     * The `beforeinstallprompt` event won't fire if the page is served over HTTP.\n     * Installability requires a service worker with a fetch event handler, and\n     * if the page isn't served over HTTPS, the service worker won't load.\n     */\n    const handleInstallBtnClick = async () => {\n      window.deferredPrompt.prompt();\n      const { outcome } = await window.deferredPrompt.userChoice;\n      console.log(`User response to the install prompt: ${outcome}`);\n      window.deferredPrompt = null;\n    }\n\n  window.addEventListener('appinstalled', () => {\n    // Clear the deferredPrompt so it can be garbage collected\n    window.deferredPrompt = null;\n    // Optionally, send analytics event to indicate successful install\n    console.log('PWA was installed');\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navigation />\n        <h2 className=\"install-promotion\">You can install PWA now.</h2>\n        <p id=\"requireHTTPS\" className=\"hidden\">\n          <b>STOP!</b> This page <b>must</b> be served over HTTPS.\n          Please <a>reload this page via HTTPS</a>.\n        </p>\n        <div id=\"installContainer\" className=\"hidden\">\n          <button id=\"butInstall\" type=\"button\" onClick={() => handleInstallBtnClick}>\n            Install\n          </button>\n        </div>\n      </header>\n      <PageInfo />\n    </div>\n  );\n}\n\nexport default App;\n","\n\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}